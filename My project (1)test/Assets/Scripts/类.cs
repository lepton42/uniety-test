using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//创建人类
public class Human
{
    //定义属性
    public string name;
    public int age;
    public string gender;//调用：human.gender，实例化对象后才能调用
    //定义静态属性，成员变量
    public static int count;//调用：Human.count，不需要实例化对象就能调用

    //定义方法，普通的成员函数（方法）
    public void SayHello()//调用：human.SayHello()，需要实例化对象后才能调用
    {//可以访问类的属性和方法，包含静态和非静态
        name = "Tom";//访问非静态属性
        age = 18;
        gender = "male";
        count++;//访问静态属性
        SayGoodbye();//调用静态方法
        Debug.Log("Hello, my name is " + name + ", I am " + age + " years old, and I am " + gender + ".");
    }
    //定义静态方法，成员函数
    public static void SayGoodbye()//调用：Human.SayGoodbye()，不需要实例化对象就能调用
    {//只能访问类的静态属性和方法
        count = 0;//访问静态属性
        Debug.Log("Goodbye!");
    }

    //构造函数
    public Human(string name, int age, string gender)
    {
        this.name = name;
        this.age = age;
        this.gender = gender;
        //构造函数执行
        Debug.Log("Human object created.");
    }
    //无参构造函数
    public Human()//已经存在了一个有参构造函数，所以需要显式定义无参构造函数
    {
        name = "John";
        age = 20;
        gender = "male";
        //构造函数执行
        Debug.Log("Human object created.");
    }
    //析构函数
    ~Human()
    {
        Debug.Log("Human object destroyed.");
    }
}

public class 类 : MonoBehaviour
{
    //定义全局变量
    public Human human;
    // Start is called before the first frame update
    void Start()
    {
        //类
        //类是面向对象编程的基础，类是对象的蓝图或模板，它定义了对象的属性和行为。
        //类可以包含字段、属性、方法、事件、索引器、运算符重载等成员。
        //类可以继承自其他类，也可以实现接口。
        //类可以实例化为对象，对象是类的实例，它具有类的属性和行为。
        //类可以包含构造函数和析构函数，构造函数在对象创建时被调用，析构函数在对象销毁时被调用。
        //类可以包含静态成员，静态成员属于类本身，而不是类的实例。
        //类可以包含抽象成员，抽象成员没有实现，必须在派生类中实现。
        //类可以包含密封成员，密封成员不能被派生类重写。
        //类可以包含嵌套类，嵌套类是类的成员，它可以在类中定义。
        //类可以包含泛型类型参数，泛型类型参数可以在类中定义，以便在实例化类时指定类型。
        //类可以包含委托类型，委托类型是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含事件类型，事件类型是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含索引器，索引器是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含运算符重载，运算符重载是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含属性，属性是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含字段，字段是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含方法，方法是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //类可以包含事件，事件是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //构造函数
        //构造函数是类的特殊方法，它在对象创建时被调用，用于初始化对象的属性。
        //构造函数可以有参数，也可以没有参数。
        //构造函数可以重载，即可以有多个构造函数，它们有不同的参数列表。
        //构造函数可以调用其他构造函数，使用this关键字。
        //构造函数可以调用基类的构造函数，使用base关键字。
        //构造函数没有返回值。名称与类名相同。
        //析构函数
        //析构函数是类的特殊方法，它在对象销毁时被调用，用于清理对象的资源。
        //析构函数没有参数，也没有返回值。没有访问修饰符。
        //析构函数不能重载。
        //析构函数不能被显式调用，它会在对象超出作用域时自动调用。
        //析构函数可以调用基类的析构函数，使用base关键字。
        //CLR 内存管理机制：CLR 内存管理机制是 .NET Framework 的一部分，它负责管理内存的分配和回收。
        //CLR 内存管理机制使用垃圾回收器来回收不再使用的对象。 
        //垃圾回收器会定期检查对象的引用，如果对象不再被引用，它就会将其标记为可回收，并在适当的时候回收它。
        //垃圾回收器会自动回收对象，不需要程序员手动释放内存。

        //字段
        //字段是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //字段可以是静态的，也可以是非静态的。
        //字段可以是私有的，也可以是公共的。
        //字段可以是只读的，也可以是可写的。
        //字段可以是常量，也可以是变量。
        //属性
        //属性是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //属性可以是静态的，也可以是非静态的。
        //属性可以是私有的，也可以是公共的。
        //属性可以是只读的，也可以是可写的。
        //属性可以是常量，也可以是变量。
        //方法
        //方法是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //方法可以是静态的，也可以是非静态的。
        //方法可以是私有的，也可以是公共的。
        //方法可以有参数，也可以没有参数。
        //方法可以有返回值，也可以没有返回值。
        //方法可以重载，即可以有多个方法，它们有不同的参数列表。
        //方法可以调用其他方法，使用this关键字。
        //方法可以调用基类的方法，使用base关键字。
        //事件
        //事件是类的成员，它可以在类中定义，以便在实例化类时指定类型。
        //事件可以是静态的，也可以是非静态的。
        //事件可以是私有的，也可以是公共的。
        //事件可以有参数，也可以没有参数。
        //事件可以有返回值，也可以没有返回值。
        //事件可以重载，即可以有多个事件，它们有不同的参数列表。
        //事件可以调用其他事件，使用this关键字。
        //事件可以调用基类的事件，使用base关键字。

        //实例化
        human = new Human("Tom", 18, "male");
        //通过不同实例化方式创建对象
        Human human2 = new Human();//局部变量的实例化类，当执行完 start方法后，human2 对象会被销毁。当出了作用域后（一对大括号），human2 对象会被自动销毁。所以析构函数会被触发。如果不希望他是局部变量，可以将其定义为类的成员变量。
        human.SayHello();
        Human.SayGoodbye();
        //释放对象
        human = null;
        Debug.Log("Human count: " + Human.count);

        //访问修饰符
        //访问修饰符是用于控制类的成员的访问级别的关键字。
        //C# 中有四种访问修饰符：public、private、protected 和 internal。
        //public：公共的，可以在任何地方访问。
        //private：私有的，只能在类内部访问。
        //protected：受保护的，只能在类内部和派生类中访问。
        //internal：内部的，只能在同一程序集内访问。
        //默认访问修饰符是 private。
        //静态成员
        //静态成员是属于类本身的，而不是类的实例。
        //静态成员可以通过类名访问，不需要实例化对象。
        //静态成员可以是字段、属性、方法、事件等。
        //静态成员可以有访问修饰符，默认为 private。 
        //抽象成员
        //抽象成员是没有实现的成员，必须在派生类中实现。
        //抽象成员可以是字段、属性、方法、事件等。
        //抽象成员不能有访问修饰符，默认为 public。
        //抽象成员必须在派生类中实现，否则派生类也是抽象类。
        //抽象类    
        //抽象类是不能实例化的类，它只能作为基类被继承。
        //所有属性（类，变量，函数）前面都可加上访问修饰符，来控制访问权限。不加时默认为 private。
        //如果构造函数是私有的，则不能在类外部实例化该类。
    }

    // Update is called once per frame
    void Update()
    {

    }
}
